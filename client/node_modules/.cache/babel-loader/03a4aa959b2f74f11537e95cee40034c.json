{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\M\\xE1rk\\\\Documents\\\\GitHub\\\\jpskills\\\\client\\\\src\\\\components\\\\exams\\\\modify\\\\AddQuestion.js\";\nimport React, { useState, useEffect } from 'react';\nexport default function AddQuestion(props) {\n  const [formCount] = useState(props.count);\n  const [renderedQuestions, setRenderedQuestions] = useState([]);\n  const [question, setQuestion] = useState(null);\n  const [points, setPoints] = useState(null);\n  useEffect(() => {\n    let result = [];\n\n    for (let i = 0; i < formCount; i++) {\n      result.push( /*#__PURE__*/React.createElement(\"form\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        name: \"question\",\n        value: question || '',\n        placeholder: \"A k\\xE9rd\\xE9s sz\\xF6vege\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"number\",\n        name: \"points\",\n        value: points || '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Felt\\xF6lt\\xE9s\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 21\n        }\n      })));\n    }\n\n    setRenderedQuestions(result);\n  }, [props.count]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, renderedQuestions.length === 0 ? null : renderedQuestions.map(value => {\n    return value;\n  }));\n}","map":{"version":3,"sources":["C:/Users/Márk/Documents/GitHub/jpskills/client/src/components/exams/modify/AddQuestion.js"],"names":["React","useState","useEffect","AddQuestion","props","formCount","count","renderedQuestions","setRenderedQuestions","question","setQuestion","points","setPoints","result","i","push","length","map","value"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA2B;AAEtC,QAAM,CAACC,SAAD,IAAeJ,QAAQ,CAACG,KAAK,CAACE,KAAP,CAA7B;AACA,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CP,QAAQ,CAAC,EAAD,CAA1D;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,IAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIW,MAAM,GAAG,EAAb;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGT,SAAnB,EAA8BS,CAAC,EAA/B,EAAkC;AAC9BD,MAAAA,MAAM,CAACE,IAAP,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,UAAxB;AAAmC,QAAA,KAAK,EAAEN,QAAQ,IAAI,EAAtD;AAA0D,QAAA,WAAW,EAAC,2BAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAEI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,IAAI,EAAC,QAA1B;AAAmC,QAAA,KAAK,EAAEE,MAAM,IAAI,EAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,eAGI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC,iBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,CADJ;AAOH;;AACDH,IAAAA,oBAAoB,CAACK,MAAD,CAApB;AACH,GAZQ,EAYN,CAACT,KAAK,CAACE,KAAP,CAZM,CAAT;AAcA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKC,iBAAiB,CAACS,MAAlB,KAA6B,CAA7B,GAAiC,IAAjC,GAAwCT,iBAAiB,CAACU,GAAlB,CAAsBC,KAAK,IAAI;AACrE,WAAOA,KAAP;AACH,GAFyC,CAD7C,CADJ;AAOH","sourcesContent":["import React, {useState, useEffect} from 'react'\r\n\r\nexport default function AddQuestion(props){\r\n\r\n    const [formCount,] = useState(props.count)\r\n    const [renderedQuestions, setRenderedQuestions] = useState([])\r\n    const [question, setQuestion] = useState(null)\r\n    const [points, setPoints] = useState(null)\r\n\r\n    useEffect(() => {\r\n        let result = []\r\n        for(let i = 0; i < formCount; i++){\r\n            result.push(\r\n                <form>\r\n                    <input type='text' name='question' value={question || ''} placeholder='A kérdés szövege'/>\r\n                    <input type='number' name='points' value={points || ''} />\r\n                    <input type='submit' value='Feltöltés' />\r\n                </form>\r\n            )\r\n        }\r\n        setRenderedQuestions(result)\r\n    }, [props.count])\r\n\r\n    return (\r\n        <div>\r\n           { renderedQuestions.length === 0 ? null : renderedQuestions.map(value => {\r\n               return value\r\n           })} \r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}