{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\M\\xE1rk\\\\Documents\\\\GitHub\\\\jpskills\\\\client\\\\src\\\\components\\\\exams\\\\modify\\\\Modifier.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport API from '../../BackendAPI';\nexport default function Modifier(props) {\n  const [param] = useState(useParams());\n  const [type, setType] = useState(null);\n  const [index] = useState(props.index);\n  const [value, setValue] = useState(props.value || false);\n  const [isAnswer] = useState(props.isAnswer || false);\n  const [modifyResult, setModifyResult] = useState(null);\n  useEffect(() => {\n    let valueType = typeof props.value;\n\n    if (valueType === 'number' || valueType === 'bigint') {\n      setType('number');\n    } else if (valueType === 'boolean') {\n      setType('bool');\n    } else if (valueType === 'string') {\n      setType('text');\n    }\n  }, [props.value, index, modifyResult]);\n\n  function handleChange(event) {\n    setValue(event.target.value);\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n\n    if (index && value) {\n      if (!isAnswer) {\n        API.post(`/exams/modify/${param.examName}`, {\n          questionId: index,\n          value: value,\n          isNumber: type === 'number'\n        }).then(response => {\n          if (response) {\n            setModifyResult(response.data.updated);\n          }\n        }).catch(err => console.log(err));\n      } else {\n        API.post(`/exams/modify/${param.examName}`, {\n          answerId: index,\n          value: value,\n          isBoolean: type === 'bool'\n        }).then(response => {\n          if (response) {\n            setModifyResult(response.data.updated);\n          }\n        }).catch(err => console.log(err));\n      }\n    }\n  }\n\n  function renderInput() {\n    if (type === 'number' || type === 'text') {\n      return /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        name: \"modify\",\n        type: type || 'text',\n        value: value || '',\n        onChange: handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"M\\xF3dos\\xEDt\\xE1s\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }\n      }));\n    } else if (type === 'bool') {\n      return /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }\n      }, value ? /*#__PURE__*/React.createElement(\"select\", {\n        name: \"modify\",\n        className: \"rounded pl-2 w-25\",\n        onChange: handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        defaultValue: true,\n        value: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 29\n        }\n      }, \"Helyes\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 29\n        }\n      }, \"Helytelen\")) : /*#__PURE__*/React.createElement(\"select\", {\n        name: \"modify\",\n        className: \"rounded pl-2 w-25\",\n        onChange: handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        defaultValue: false,\n        value: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 29\n        }\n      }, \"Helyes\"), /*#__PURE__*/React.createElement(\"option\", {\n        defaultValue: true,\n        value: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 29\n        }\n      }, \"Helytelen\")), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"M\\xF3dos\\xEDt\\xE1s\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }\n      }));\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, renderInput());\n}","map":{"version":3,"sources":["C:/Users/MÃ¡rk/Documents/GitHub/jpskills/client/src/components/exams/modify/Modifier.js"],"names":["React","useState","useEffect","useParams","API","Modifier","props","param","type","setType","index","value","setValue","isAnswer","modifyResult","setModifyResult","valueType","handleChange","event","target","handleSubmit","preventDefault","post","examName","questionId","isNumber","then","response","data","updated","catch","err","console","log","answerId","isBoolean","renderInput"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AAEA,OAAOC,GAAP,MAAgB,kBAAhB;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAwB;AAEnC,QAAM,CAACC,KAAD,IAAWN,QAAQ,CAACE,SAAS,EAAV,CAAzB;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACS,KAAD,IAAWT,QAAQ,CAACK,KAAK,CAACI,KAAP,CAAzB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAACK,KAAK,CAACK,KAAN,IAAe,KAAhB,CAAlC;AACA,QAAM,CAACE,QAAD,IAAcZ,QAAQ,CAACK,KAAK,CAACO,QAAN,IAAkB,KAAnB,CAA5B;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAAC,IAAD,CAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIc,SAAS,GAAG,OAAOV,KAAK,CAACK,KAA7B;;AACA,QAAGK,SAAS,KAAK,QAAd,IAA0BA,SAAS,KAAK,QAA3C,EAAoD;AAChDP,MAAAA,OAAO,CAAC,QAAD,CAAP;AACH,KAFD,MAEM,IAAGO,SAAS,KAAK,SAAjB,EAA2B;AAC7BP,MAAAA,OAAO,CAAC,MAAD,CAAP;AACH,KAFK,MAEA,IAAGO,SAAS,KAAK,QAAjB,EAA0B;AAC5BP,MAAAA,OAAO,CAAC,MAAD,CAAP;AACH;AACJ,GATQ,EASP,CAACH,KAAK,CAACK,KAAP,EAAcD,KAAd,EAAqBI,YAArB,CATO,CAAT;;AAWA,WAASG,YAAT,CAAsBC,KAAtB,EAA4B;AACxBN,IAAAA,QAAQ,CAACM,KAAK,CAACC,MAAN,CAAaR,KAAd,CAAR;AACH;;AAED,WAASS,YAAT,CAAsBF,KAAtB,EAA4B;AACxBA,IAAAA,KAAK,CAACG,cAAN;;AACA,QAAGX,KAAK,IAAIC,KAAZ,EAAkB;AACd,UAAG,CAACE,QAAJ,EAAa;AACTT,QAAAA,GAAG,CAACkB,IAAJ,CAAU,iBAAgBf,KAAK,CAACgB,QAAS,EAAzC,EACI;AAACC,UAAAA,UAAU,EAAEd,KAAb;AAAoBC,UAAAA,KAAK,EAAEA,KAA3B;AAAkCc,UAAAA,QAAQ,EAAEjB,IAAI,KAAK;AAArD,SADJ,EAECkB,IAFD,CAEMC,QAAQ,IAAK;AACf,cAAGA,QAAH,EAAY;AACRZ,YAAAA,eAAe,CAACY,QAAQ,CAACC,IAAT,CAAcC,OAAf,CAAf;AACH;AACJ,SAND,EAMGC,KANH,CAMSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CANhB;AAOH,OARD,MAQK;AACD3B,QAAAA,GAAG,CAACkB,IAAJ,CAAU,iBAAgBf,KAAK,CAACgB,QAAS,EAAzC,EACI;AAACW,UAAAA,QAAQ,EAAExB,KAAX;AAAkBC,UAAAA,KAAK,EAAEA,KAAzB;AAAgCwB,UAAAA,SAAS,EAAE3B,IAAI,KAAK;AAApD,SADJ,EAECkB,IAFD,CAEMC,QAAQ,IAAK;AACf,cAAGA,QAAH,EAAY;AACRZ,YAAAA,eAAe,CAACY,QAAQ,CAACC,IAAT,CAAcC,OAAf,CAAf;AACH;AACJ,SAND,EAMGC,KANH,CAMSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CANhB;AAOH;AACJ;AACJ;;AAED,WAASK,WAAT,GAAsB;AAClB,QAAG5B,IAAI,KAAK,QAAT,IAAqBA,IAAI,KAAK,MAAjC,EAAwC;AACpC,0BACI;AAAM,QAAA,QAAQ,EAAEY,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,IAAI,EAAEZ,IAAI,IAAI,MAAnC;AACI,QAAA,KAAK,EAAEG,KAAK,IAAI,EADpB;AACwB,QAAA,QAAQ,EAAEM,YADlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAGI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC,oBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,CADJ;AAMH,KAPD,MAOM,IAAGT,IAAI,KAAK,MAAZ,EAAmB;AACrB,0BACI;AAAM,QAAA,QAAQ,EAAEY,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKT,KAAK,gBACF;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,mBAAhC;AAAoD,QAAA,QAAQ,EAAEM,YAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAQ,QAAA,YAAY,EAAE,IAAtB;AAA4B,QAAA,KAAK,EAAE,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAQ,QAAA,KAAK,EAAE,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFJ,CADE,gBAMF;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,mBAAhC;AAAoD,QAAA,QAAQ,EAAEA,YAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAQ,QAAA,YAAY,EAAE,KAAtB;AAA6B,QAAA,KAAK,EAAE,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAQ,QAAA,YAAY,EAAE,IAAtB;AAA4B,QAAA,KAAK,EAAE,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFJ,CAPR,eAaI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC,oBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAbJ,CADJ;AAiBH;AACJ;;AAED,sBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKmB,WAAW,EADhB,CADA;AAIH","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport {useParams} from 'react-router-dom'\r\n\r\nimport API from '../../BackendAPI'\r\n\r\nexport default function Modifier(props){\r\n\r\n    const [param,] = useState(useParams())\r\n    const [type, setType] = useState(null)\r\n    const [index,] = useState(props.index)\r\n    const [value, setValue] = useState(props.value || false)\r\n    const [isAnswer,] = useState(props.isAnswer || false)\r\n    const [modifyResult, setModifyResult] = useState(null)\r\n\r\n    useEffect(() => {\r\n        let valueType = typeof props.value\r\n        if(valueType === 'number' || valueType === 'bigint'){\r\n            setType('number')\r\n        }else if(valueType === 'boolean'){\r\n            setType('bool')\r\n        }else if(valueType === 'string'){\r\n            setType('text')\r\n        }\r\n    },[props.value, index, modifyResult])\r\n\r\n    function handleChange(event){\r\n        setValue(event.target.value)\r\n    }\r\n\r\n    function handleSubmit(event){\r\n        event.preventDefault()\r\n        if(index && value){\r\n            if(!isAnswer){\r\n                API.post(`/exams/modify/${param.examName}`, \r\n                    {questionId: index, value: value, isNumber: type === 'number'})\r\n                .then(response  => {\r\n                    if(response){\r\n                        setModifyResult(response.data.updated)\r\n                    }\r\n                }).catch(err => console.log(err))\r\n            }else{\r\n                API.post(`/exams/modify/${param.examName}`, \r\n                    {answerId: index, value: value, isBoolean: type === 'bool'})\r\n                .then(response  => {\r\n                    if(response){\r\n                        setModifyResult(response.data.updated)\r\n                    }\r\n                }).catch(err => console.log(err))\r\n            }\r\n        }\r\n    }\r\n\r\n    function renderInput(){\r\n        if(type === 'number' || type === 'text'){\r\n            return (\r\n                <form onSubmit={handleSubmit}>\r\n                    <input name='modify' type={type || 'text'} \r\n                        value={value || ''} onChange={handleChange}/>\r\n                    <input type='submit' value=\"MÃ³dosÃ­tÃ¡s\" />\r\n                </form>)\r\n        }else if(type === 'bool'){\r\n            return (\r\n                <form onSubmit={handleSubmit}>\r\n                    {value ?\r\n                        <select name='modify' className=\"rounded pl-2 w-25\" onChange={handleChange}>\r\n                            <option defaultValue={true} value={true}>Helyes</option>\r\n                            <option value={false}>Helytelen</option>\r\n                        </select>\r\n                    :\r\n                        <select name='modify' className=\"rounded pl-2 w-25\" onChange={handleChange}>\r\n                            <option defaultValue={false} value={true}>Helyes</option>\r\n                            <option defaultValue={true} value={false}>Helytelen</option>\r\n                        </select> \r\n                    }\r\n                    \r\n                    <input type='submit' value=\"MÃ³dosÃ­tÃ¡s\" />\r\n                </form>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n    <div>\r\n        {renderInput()}\r\n    </div>)\r\n}"]},"metadata":{},"sourceType":"module"}